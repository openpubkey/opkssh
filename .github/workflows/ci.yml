name: CI

# Runs CI for pull requests and pushes to main
on:
  pull_request:
  push:
    branches:
      - main
  # schedule:
  #   - cron: 0 14 * * MON-FRI # Every weekday at 14:00 UTC

permissions: {}

jobs:
  # Check that binary can be built
  build:
    name: Build
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    strategy:
      matrix:
        go-version: [1.23.x]
    steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false
    - name: Install Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: ${{ matrix.go-version }}
    - name: Install dependencies
      run: go mod download
    - name: Build
      run: go build -v -o /dev/null
  # Run integration tests
  test:
    needs: build
    name: 'Integration Tests'
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 8
    strategy:
      matrix:
        runs_on: [ubuntu-24.04, ubuntu-24.04-arm]
        os: [ubuntu, centos, arch, opensuse]
        exclude:
          - runs_on: ubuntu-24.04-arm
            os: arch
    env:
      OS_TYPE: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false
    - name: Install Go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version-file: 'go.mod'
    - name: Install Docker
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
    - name: Install dependencies
      run: go mod download
    - name: Run integration tests
      run: go test -tags=integration ./test/integration -timeout=15m -count=1 -parallel=2 -v
  lint-scripts:
    name: Shell Scripts Lint & Test
    runs-on: ubuntu-24.04
    container:
      image: opensuse/tumbleweed:latest@sha256:85fc2a9ee77c51ebdccaeb5b3f7350c8799de2a6487c8ec4a538b382329dc73d
    steps:
    - name: Install packages
      run: |
        zypper refresh
        zypper --non-interactive install --no-recommends git wget ShellCheck shunit2 findutils python313-bashate
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false
    - name: Run ShellCheck
      run: |
        echo "Running ShellCheck on all .sh files under scripts/"
        find scripts/ -type f -name '*.sh' | while read -r file; do
          echo "üîç Checking $file"
          shellcheck "$file"
        done
    - name: Run shunit2 tests
      run: |
        echo "Running shUnit2 on all .sh files under scripts/test"
        find scripts/test -type f -name '*.sh' | while read -r file; do
          echo "üîç Checking $file"
          bash "$file"
        done
    - name: Check scripts with bashate
      run: |
        echo "Running bashate on all .sh files under scripts/"
        find scripts/ -type f -name '*.sh' | while read -r file; do
          echo "üîç Checking $file"
          bashate -i E006 "$file"
        done
    - name: Check wget url pipe
      run: |
        set -euo pipefail

        RAW_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${GITHUB_SHA}/scripts/install-linux.sh"
        echo "Testing URL: $RAW_URL"
        set +e
        output=$(wget -qO- "$RAW_URL" | bash 2>&1)
        result=$?
        set -e

        if [[ "$result" -ne 1 ]]; then
          echo "‚ùå Expected exit code 1 but got $result"
          exit 1
        fi

        if ! grep -q "Error: sudo is not installed. Please install it first" <<< "$output"; then
          echo "‚ùå Expected error message not found in output"
          exit 1
        fi

        echo "‚úÖ Script behaved as expected when piping to bash"
